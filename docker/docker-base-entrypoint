#!/bin/sh
set -eu

# Run Inside a subshell to not expose .env to entrypoint.
(
  # Load .env and .env.<APP_ENV> into script (won't overwrite OS env vars.)
  set -a
      env_overwrite=./.env.${APP_ENV-prod}
      export -p >> /tmp/envsrc && if [ -f "./.env" ]; then . ./.env; fi && if [ -f "${env_overwrite}" ]; then . $env_overwrite; fi && . /tmp/envsrc \
      && rm /tmp/envsrc && unset env_overwrite
  set +a

  # --------------------------------------------------------------------------------------------------------------------

  # !-- We want to only print in logs if something wrong happened, hence how below code is written. --!
  echo "► Running composer's post-install-cmd..."
  error=$(composer run-script --no-interaction post-install-cmd 2>&1)  \
  || if [ $? -ne 0 ]; then printf "%s \nerror running composer post-install-cmd script: " "$error"; exit 1; fi
  echo "✔ Successful"

  # Run custom ad-hoc post-deployment script
  echo "► Running custom post deployment script..."
  error=$(docker-base-post-deployment 2>&1)  \
  || if [ $? -ne 0 ]; then printf "%s \nerror running post-deployment script: " "$error"; exit 1; fi
  echo "✔ Successful"

  # Permissions for var directory (generated by post-install-cmd)
  echo "► Adjusting Permissions... "
  chown -R www-data:www-data var
  echo "✔ Successful"

)

# ----------------------------------------------------------------------------------------------------------------------

# Run Dockerfile's CMD (default: $> php-fpm )
echo "► Starting... cmd: ${@}"
exec tini "${@}"