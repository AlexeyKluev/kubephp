#!/bin/sh
set -eu

# ----------------------------------------------------------------------------------------------------------------------

# This part pass all container environment variables to apache's processes since by default apache doesn't pass them.
# With this, adding OS Env variable to container is enough for PHP to pick it up, elimnating the extra step of adding
# it to apache too.
# Lock file to be able to restart container without appending env files again.
LOCK=/var/lock/env-passed.lock
if [ ! -f ${LOCK} ]; then
    # Pass all OS Environment variables to Apache, hence it will be available to PHP App.
    # Excluding HOME to surpress Apache warning for not having HOME env.
    {
      printf  "\n\n# --- Pass OS environment to Apache processes ---"
      printf "# This block was generated during container entrypoint script"
      env | grep -v ^HOME= | sed 's/=\(.*\)//' | awk '{print "PassEnv "$0}'
     }  >> /etc/apache2/apache2.conf

    touch ${LOCK}
fi

# ----------------------------------------------------------------------------------------------------------------------

LOCK=/var/lock/runtime-setup.lock
if [ ! -f ${LOCK} ]; then
    # !-- We want to only print in logs if something wrong happends, hence how below code is written. --!

    # Run Composer Post-install Command (Run at runtime as it might need network connection to DBs or services)
    error=`composer run-script --no-interaction post-install-cmd 2>&1`  \
    || if [ $? -ne 0 ]; then printf "%s \nerror running composer post-install cmd (exit code: $?)" "$error"; exit 1; fi

    # Run custom ad-hoc post-deployment script (wrapper will run dotenv to take .env and .env.<env> values).
    error=`docker-post-deploy-wrapper 2>&1`  \
    || if [ $? -ne 0 ]; then printf "%s \nerror running post-deployment script (exit code: $?)" "$error"; exit 1; fi

    # Permissions for var directory (generated by post-install-cmd)
    chown -R www-data:www-data var

    touch ${LOCK}
fi

# ----------------------------------------------------------------------------------------------------------------------

# Start php base-image entrypoint.
exec docker-php-entrypoint "apache2-foreground"